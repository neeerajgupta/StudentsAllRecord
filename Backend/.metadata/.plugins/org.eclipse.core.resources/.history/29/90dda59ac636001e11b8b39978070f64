package com.security.configu;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.AuthorizeHttpRequestsDsl;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.*;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity
public class SecurityConfg {
	
			@Bean
			public UserDetailsService userdatilsservice() {
			//	public UserDetailsService userdatilsservice(PasswordEncoder encoder) {
				
//				UserDetails admin=User.withUsername("neeraj")
//						.password(encoder.encode("pwd1"))
//						.roles("ADMIN")
//						.build();
//						
//				UserDetails user=User.withUsername("durga")
//						.password(encoder.encode("pwd2"))
//						.roles("USER","admin","hr")
//						.build();
//				
//				return new InMemoryUserDetailsManager(admin,user);
				
				
				return new UserInfoUserDAtilsServices();
			}
			
			

			@Bean
			public PasswordEncoder passwordEncoder(){
				return new BCryptPasswordEncoder();
				
			}
	
		
			@Bean
			public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception  {
				return http.csrf().disable()
				.authorizeHttpRequests().requestMatchers("/welcome","/adduser","/home").permitAll()
				
				.and().authorizeHttpRequests().requestMatchers("/admin","/getuser").authenticated()
				.and().authorizeHttpRequests().requestMatchers("/user").authenticated()	
				.and().formLogin()
				.and().build();
				
		 	}
			
			@Bean
			public AuthenticationProvider authenticationProvider() {
				DaoAuthenticationProvider authenticationProvider=new DaoAuthenticationProvider();
				authenticationProvider.setUserDetailsService(userdatilsservice());
				authenticationProvider.setPasswordEncoder(passwordEncoder());
				return authenticationProvider;
			}

	
	
	    
	

}
