package com.security.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.security.entity.AuthRequ;
import com.security.entity.StudentInfo;
import com.security.entity.UserInfo;
import com.security.services.JwtSErvices;
import com.security.services.StudentInfoServices;
import com.security.services.UserServices;

@RestController
@CrossOrigin(origins = "http://localhost:4200")
public class SecurityTestingController {

	@GetMapping("/welcome")
	public String getmsg() {
		String msg = "welcome To Secourity MAnager";
		return msg;
	}

	@CrossOrigin(origins = "http://localhost:4200")
	@GetMapping("/home")
	public String home() {
		String msg = "WELCOME TO HOME PAGE!!......  ";
		return msg;

	}

	@GetMapping("/user")
	@PreAuthorize("hasAuthority('ROLE_USER')")
	public String geuser() {
		String msg = "WELCOME TO USER PAGE!!!......  ";
		return msg;

	}

	@GetMapping("/admin")
	@PreAuthorize("hasAuthority('ROLE_ADMIN')")
	public String getadmin() {
		String msg = "WELCOME TO ADMIN PAGE!!......  ";
		return msg;

	}

	@Autowired
	private UserServices services;

	@Autowired
	private JwtSErvices jwtservices;

	@Autowired
	private AuthenticationManager authenticationManager;

	@PostMapping("/adduser")
	public String addnew(@RequestBody UserInfo userInfo) {
		String addUser = services.addUser(userInfo);
		return "Add Successfull" + userInfo;
	}

	@GetMapping("/getuser")
	// @PreAuthorize("hasAuthority('ROLE_ADMIN')")
	public List<UserInfo> getAllUser() {
		return services.getAllUser();
	}

	// studentsInfo
	@Autowired
	private StudentInfoServices studentInfoServices;

	@GetMapping("/getall")
	@PreAuthorize("hasAuthority('ROLE_ADMIN')")
	public List<StudentInfo> allStudent() {
		return studentInfoServices.getAllStudent();

	}

	@GetMapping("/getalls")

	public List<StudentInfo> allStudent1() {
		return studentInfoServices.getAllStudent();

	}

	@PostMapping("/addstudent")
	public String addStudent(@RequestBody StudentInfo studentInfo) {
		studentInfoServices.create(studentInfo);
		return studentInfo.getName() + "  Add SuccessFull";
	}

	// End STUDENT INFO
	// 1.jwt->entity

	@PostMapping("/authencation")
//	public Map<String, String> authencationandgettoken(@RequestBody AuthRequ authRequ)
	public String authencationandgettoken(@RequestBody AuthRequ authRequ){
		Map<String, String> generateToken = new HashMap<>();

		Authentication authenticate = authenticationManager
				.authenticate(new UsernamePasswordAuthenticationToken(authRequ.getUsername(), authRequ.getPassword()));

		if (authenticate.isAuthenticated()) {
//			generateToken.put("payLoadToken", jwtservices.generateToken(authRequ.getUsername()));
//			return generateToken;
			
			return (jwtservices.generateToken(authRequ.getUsername()));
			
			
		}else {
			throw new UsernameNotFoundException(authRequ.getUsername()+"  Invalid User Name");
		}
		

	}

}